#!/usr/bin/env osascript

(*
Copyright (c) 2023 Andrey Zhuchkov

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*)

on format_bytes(amount, human)
  if human then
    return (round(amount / 1000)) & " kB"
  end if
  return amount
end bytes

on run argv
    set usage to ¬
"Usage: tunblkctl connect <conf>
                 disconnect [conf]
                 list
                 status
                 quit"

    if (count of argv) = 0 then
        log usage
        error number 1
    end if

    tell application "Tunnelblick"
        set command to item 1 of argv

        if command begins with "con" then
            set conf to item 2 of argv
            if connect conf then
                log "Tunnel establishing..."
            else
                log "Unable to bootstrap the tunnel." 
                error number 2
            end if
            if argv contains "-w" then
              get state of first configuration where name = conf
              repeat until result = "CONNECTED"
                  delay 0.3
                  get state of first configuration where name = conf
              end repeat
            end if
        else if command begins with "dis" then
            if (count argv) > 1 then
                if disconnect (item 2 of argv) then
                    log "Shutting down the tunnel..."
                else
                    log "Unable to shutdown the tunnel."
                    error number 2
                end if
            else
                log "Shutting down tunnels: " & (disconnect all)
            end if
        else if {"status", "st"} contains command then
            set confs to {}
	
            -- convert data for easier access
            repeat with i from 1 to count (get name of configurations)
              copy { ¬
                name: (item i of (get name of configurations)), ¬
                state: (item i of (get state of configurations)), ¬
                bytesIn: (item i of (get bytesIn of configurations)), ¬
                bytesOut: (item i of (get bytesOut of configurations)) ¬
              } to end of confs
            end repeat

            set human to (argv does not contain "--raw")
            set out to ""
             
            if human then
              set out to "CONFIGURATION\tSTATE\tIN\tOUT" 
            end if

            repeat with conf in confs
                if out isn't "" then 
                  set out to out & "\n"
                end if

                set out to ¬
                    out & ¬ 
                    (name of conf) & "\t" & ¬
                    (state of conf) & "\t" & ¬
                    (my format_bytes(bytesIn of conf, human)) & "\t" & ¬
                    (my format_bytes(bytesOut of conf, human))
            end repeat
        else if {"list", "ls"} contains command then
          set confs to (get name of configurations)
          set out to ""
          repeat with conf in confs
            if out isn't "" then 
              set out to out & "\n"
            end if 
            set out to out & conf
          end repeat
        else if command equal to "quit"
            quit
            log "Quit Tunnelblick."
        else
            log "Unexpected command: " & command
            log usage
            error number 1
        end if
    end tell
end run

